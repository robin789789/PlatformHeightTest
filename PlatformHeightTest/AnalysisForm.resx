<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAEAAAAA29pYgBzbWcAc21mAP///wAAAAAD2c7AAG5pYgBzbWYAg3x0AAAAAAIAAAACe3RtAHJs
        ZQBwa2QAvrOjAAAAAAP///8AUEtEAFVQSABWUUgAAAAAAQAAAAN2b2QAUk1FAFRPRwBNSUEIUExEkVFM
        RZJUT0cJU05GAAAAAAIZGBYKaGJcInRuZyh0bmcnc21mKGZhWy1fWlQtcGpjJ3RuZyd0bmcncGpkKGBb
        VS5lX1krdG5nJ3NtZidcV08nTklCK0VBOi9PSkMpVVBIJ1VQSCdUT0coSUU+LUdCPC1TTkYoVVBIJVVQ
        SElTTkbmUUxE+1FMRIlUT0cNZmBaAGBaVBFuaGG8cmxl63RuZ+t0bmfsdG5n7HFrZO1wamPsc21m63Ru
        Z+t0bmfrc21m7HBqY+xxa2Trc21m61xXT+xUT0fsU05G7VBLROxTTkbsVE9H7FRPR+xUT0fsUUxF7VFM
        RexUT0frVE9H7FRPR/pTTkb/UUxE/FJNRZ5zbWYAdW9oEHJsZc9wamP8cmxlynRuZ8B0bmfBdG5nwXBq
        Y8FvaWLEc21mwnRuZ8F0bmfBc21mwW9pYsJvaWLEXFdPw1RPR8NUT0fDUk1Gw1BLRMVTTkbFVE9Hw1RP
        R8NUT0fDUUxEw1FMRMVUT0fIVE9H8VRPR/9TTkbwUEtDeXRuZwB0bmcQdG5nz3JsZuZdWFMvTkpFC3Zw
        aAl1b2gJcmxlCUVCPQ89OjYSZmBaC3ZwaAl2cGkJZF9ZCjs4NBE7ODMQVVBICldSSgpYUkoKPTk0DS0q
        JhNEQDkNWFNKCldSSgpTTUYKLSomDklEPjdUT0fiVE9H9FRPR2c6NzICAAAAAnFrZBB0bmfPdG5n42pk
        XiEAAAAHAAAAA19aVABpZF0Ap5+UAAAAAAUAAAAIAAAAAV5aVABdWFIAAAAAAQAAAAgAAAAFbWZcAFBL
        QwBIQzwAAAAAAwAAAAkAAAACRUA6AE1IQQChl4gAHx4bC05JQm5TTkZkW1VNAVFMRAAAAAAFVE9KFnRu
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>